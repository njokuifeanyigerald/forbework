# name: Fintech App CI/CD

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   build-and-scan:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install Dependencies
#         run: pip install -r requirements.txt

#       - name: Run SonarQube Scan
#         uses: sonarsource/sonarqube-scan-action@master
#         with:
#           projectKey: fintech-app
#           host: ${{ secrets.SONAR_HOST_URL }}
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build and Tag Docker Image
#         run: |
#           docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:${{ github.sha }} .
#           docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:${{ github.sha }} \
#             ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest

#       - name: Push Docker Image to ECR
#         run: |
#           docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:${{ github.sha }}
#           docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest

#       - name: Scan Image with Trivy
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:${{ github.sha }}
#           format: table
#           exit-code: '1'
#           ignore-unfixed: true
#           vuln-type: os,library
#           severity: CRITICAL,HIGH
#           ignorefile: .trivyignore

#   deploy:
#     needs: build-and-scan
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/master'
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Update EKS Kubeconfig
#         run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

#       - name: Deploy to EKS
#         run: |
#           sed -i "s|{{IMAGE}}|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:${{ github.sha }}|g" k8s/deployment.yml
#           kubectl apply -f k8s/deployment.yml

#       - name: Verify Deployment
#         run: kubectl rollout status deployment/fintech-app -n default

#       - name: Wait for Pods to be Ready
#         run: |
#           kubectl wait --for=condition=ready pod -l app=fintech-app --timeout=60s

#       - name: Verify Deployment
#         run: kubectl rollout status deployment/fintech-app -n default

#       - name: List all pods for debugging
#         run: kubectl get pods -n default

#       - name: List all svc for debugging
#         run: kubectl get svc -n default